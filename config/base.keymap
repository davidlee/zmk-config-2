#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.

#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/rgb.h>

#include "defines.h"
#include "zmk-helpers/helper.h"

#include <dt-bindings/zmk/ext_power.h>

#ifdef CONFIG_WIRELESS
  #include <dt-bindings/zmk/bt.h>
  #include <dt-bindings/zmk/outputs.h>
  #define _BT_SEL_KEYS_  &bt BT_SEL 1  &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_SEL 5 
  #define _BT_MGMT_KEYS_ XXX           &out OUT_USB &out OUT_BLE &bt BT_CLR   &bt BT_CLR_ALL    

  // #define _BT_SEL_KEYS_                                                        \
  //     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
  // #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#ifndef LH2
  #define THUMBS LH1 LH0 RH0 RH1         // Thumbs on 34 keys.
#else
  #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // Thumbs on 36+ keys.
#endif

/* custom keycodes */

// thumbs

#define LTH_OUT &lt FN ESCAPE
#define LTH     &lt NUM SPACE
#define LTH_IN  &mt LCTRL TAB

#define RTH_IN  &mo NAV 
#define RTH     &th LSHIFT BACKSPACE
#define RTH_OUT &kp DOT

/* nav / media */

#define ZOOM_IN  &kp C_AC_ZOOM_IN 
#define ZOOM_OUT &kp C_AC_ZOOM_OUT 
// #define VOL_UP   &kp C_VOL_UP
// #define VOL_DN   &kp C_VOL_DN
// #define TRK_NEXT &kp C_NEXT
// #define TRK_PREV &kp C_PREV
#define BACK     &kp K_BACK
#define FWD      &kp K_FORWARD

// #define PSCR     &kp PRINTSCREEN
// #define PAUS     &kp PAUSE_BREAK:

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <TAPPING_TERM_MS>; quick-tap-ms = <QUICK_TAP_MS>; \
               require-prior-idle-ms = <PRIOR_IDLE_MS>; hold-trigger-on-release;   \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

// thumb layer-tap / mod-tap
ZMK_BEHAVIOR(th, hold_tap, 
    flavor = "balanced";
    tapping-term-ms = <160>; // shorter 
    bindings = <&kp>, <&kp>;
    // quick-tap-ms = <QUICK_TAP_MS>; // tap-then-tap-and-hold for space / backspace
)

// Sticky shift + leader.
ZMK_MACRO(leader_sft, bindings = <&sk LSHFT &leader>;)


&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

/* Combos, leader key sequences, mouse emulation */

#include "combos.dtsi" // Must be sourced after HRM-combo hack.
#include "leader.dtsi"
#include "mouse.dtsi"

/* Nav cluster */

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <TAPPING_TERM_MS>;                                         \
  quick-tap-ms = <QUICK_TAP_MS>;                                               \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };
